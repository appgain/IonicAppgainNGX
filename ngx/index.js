import { __decorate, __extends } from "tslib";
/**
 * This is a template for new plugin wrappers
 *
 * TODO:
 * - Add/Change information below
 * - Document usage (importing, executing main functionality)
 * - Remove any imports that you are not using
 * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added
 * - Remove this note
 *
 */
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var AppgainPlugin = /** @class */ (function (_super) {
    __extends(AppgainPlugin, _super);
    function AppgainPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppgainPlugin.prototype.initSDK = function (appId, apiKey, autoConfigure) { return cordova(this, "initSDK", { "sync": true }, arguments); };
    AppgainPlugin.prototype.matchLink = function () { return cordova(this, "matchLink", { "sync": true }, arguments); };
    AppgainPlugin.prototype.fireAutomator = function (triggerPointName, payload) { return cordova(this, "fireAutomator", { "sync": true }, arguments); };
    AppgainPlugin.prototype.addPurchase = function (name, amount, currency) { return cordova(this, "addPurchase", { "sync": true }, arguments); };
    AppgainPlugin.prototype.addNotificationChannel = function (type, target) { return cordova(this, "addNotificationChannel", { "sync": true }, arguments); };
    AppgainPlugin.prototype.logEvent = function (event, action, extras) { return cordova(this, "logEvent", { "sync": true }, arguments); };
    AppgainPlugin.prototype.getUserId = function () { return cordova(this, "getUserId", { "sync": true }, arguments); };
    AppgainPlugin.prototype.setUserId = function (id) { return cordova(this, "setUserId", { "sync": true }, arguments); };
    AppgainPlugin.prototype.updateUserData = function (userData) { return cordova(this, "updateUserData", { "sync": true }, arguments); };
    AppgainPlugin.pluginName = "AppgainPlugin";
    AppgainPlugin.plugin = "appgain-plugin";
    AppgainPlugin.pluginRef = "plugins.AppgainPlugin";
    AppgainPlugin.repo = "https://gitlab.com/naeem17/appgain-sdk-ionic-native";
    AppgainPlugin.install = "";
    AppgainPlugin.installVariables = [];
    AppgainPlugin.platforms = ["Android"];
    AppgainPlugin = __decorate([
        Injectable()
    ], AppgainPlugin);
    return AppgainPlugin;
}(IonicNativePlugin));
export { AppgainPlugin };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2FwcGdhaW4tcGx1Z2luL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7R0FVRztBQUNILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFnQ3JDLGlDQUFpQjs7OztJQVFsRCwrQkFBTyxhQUFDLEtBQWEsRUFBRSxNQUFjLEVBQUUsYUFBc0I7SUFRN0QsaUNBQVM7SUFVVCxxQ0FBYSxhQUFDLGdCQUF3QixFQUFFLE9BQVk7SUFXcEQsbUNBQVcsYUFBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLFFBQWdCO0lBVTFELDhDQUFzQixhQUFDLElBQVksRUFBRSxNQUFjO0lBV25ELGdDQUFRLGFBQUMsS0FBYSxFQUFFLE1BQWMsRUFBRSxNQUFXO0lBUW5ELGlDQUFTO0lBU1QsaUNBQVMsYUFBQyxFQUFVO0lBV3BCLHNDQUFjLGFBQUMsUUFBYTs7Ozs7Ozs7SUF0RmpCLGFBQWE7UUFEekIsVUFBVSxFQUFFO09BQ0EsYUFBYTt3QkE1QzFCO0VBNENtQyxpQkFBaUI7U0FBdkMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBpcyBhIHRlbXBsYXRlIGZvciBuZXcgcGx1Z2luIHdyYXBwZXJzXG4gKlxuICogVE9ETzpcbiAqIC0gQWRkL0NoYW5nZSBpbmZvcm1hdGlvbiBiZWxvd1xuICogLSBEb2N1bWVudCB1c2FnZSAoaW1wb3J0aW5nLCBleGVjdXRpbmcgbWFpbiBmdW5jdGlvbmFsaXR5KVxuICogLSBSZW1vdmUgYW55IGltcG9ydHMgdGhhdCB5b3UgYXJlIG5vdCB1c2luZ1xuICogLSBSZW1vdmUgYWxsIHRoZSBjb21tZW50cyBpbmNsdWRlZCBpbiB0aGlzIHRlbXBsYXRlLCBFWENFUFQgdGhlIEBQbHVnaW4gd3JhcHBlciBkb2NzIGFuZCBhbnkgb3RoZXIgZG9jcyB5b3UgYWRkZWRcbiAqIC0gUmVtb3ZlIHRoaXMgbm90ZVxuICpcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG4vKipcbiAqIEBuYW1lIEFwcGdhaW5QbHVnaW5cbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZG9lcyBzb21ldGhpbmdcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEFwcGdhaW5QbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2FwcGdhaW4tcGx1Z2luL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwZ2FpbjogQXBwZ2FpblBsdWdpbikgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMuYXBwZ2Fpbi5mdW5jdGlvbk5hbWUoJ0hlbGxvJywgMTIzKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0FwcGdhaW5QbHVnaW4nLFxuICBwbHVnaW46ICdhcHBnYWluLXBsdWdpbicsIC8vIG5wbSBwYWNrYWdlIG5hbWUsIGV4YW1wbGU6IGNvcmRvdmEtcGx1Z2luLWNhbWVyYVxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLkFwcGdhaW5QbHVnaW4nLCAvLyB0aGUgdmFyaWFibGUgcmVmZXJlbmNlIHRvIGNhbGwgdGhlIHBsdWdpbiwgZXhhbXBsZTogbmF2aWdhdG9yLmdlb2xvY2F0aW9uXG4gIHJlcG86ICdodHRwczovL2dpdGxhYi5jb20vbmFlZW0xNy9hcHBnYWluLXNkay1pb25pYy1uYXRpdmUnLCAvLyB0aGUgZ2l0aHViIHJlcG9zaXRvcnkgVVJMIGZvciB0aGUgcGx1Z2luXG4gIGluc3RhbGw6ICcnLCAvLyBPUFRJT05BTCBpbnN0YWxsIGNvbW1hbmQsIGluIGNhc2UgdGhlIHBsdWdpbiByZXF1aXJlcyB2YXJpYWJsZXNcbiAgaW5zdGFsbFZhcmlhYmxlczogW10sIC8vIE9QVElPTkFMIHRoZSBwbHVnaW4gcmVxdWlyZXMgdmFyaWFibGVzXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJ10sIC8vIEFycmF5IG9mIHBsYXRmb3JtcyBzdXBwb3J0ZWQsIGV4YW1wbGU6IFsnQW5kcm9pZCcsICdpT1MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBcHBnYWluUGx1Z2luIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQHBhcmFtIGFwcElkIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBhcGlLZXkge3N0cmluZ31cbiAgICogQHBhcmFtIGF1dG9Db25maWd1cmUge2Jvb2xlYW59XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBpbml0U0RLKGFwcElkOiBzdHJpbmcsIGFwaUtleTogc3RyaW5nLCBhdXRvQ29uZmlndXJlOiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIG1hdGNoTGluaygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gdHJpZ2dlclBvaW50TmFtZSB7c3RyaW5nfVxuICAgKiBAcGFyYW0gcGF5bG9hZCB7YW55fVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgZmlyZUF1dG9tYXRvcih0cmlnZ2VyUG9pbnROYW1lOiBzdHJpbmcsIHBheWxvYWQ6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBuYW1lIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBhbW91bnQge251bWJlcn1cbiAgICogQHBhcmFtIGN1cnJlbmN5IHtzdHJpbmd9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBhZGRQdXJjaGFzZShuYW1lOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyLCBjdXJyZW5jeTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHR5cGUge3N0cmluZ31cbiAgICogQHBhcmFtIHRhcmdldCB7c3RyaW5nfVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgYWRkTm90aWZpY2F0aW9uQ2hhbm5lbCh0eXBlOiBzdHJpbmcsIHRhcmdldDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGV2ZW50IHtzdHJpbmd9XG4gICAqIEBwYXJhbSBhY3Rpb24ge3N0cmluZ31cbiAgICogQHBhcmFtIGV4dHJhcyB7YW55fVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgbG9nRXZlbnQoZXZlbnQ6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcsIGV4dHJhczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGdldFVzZXJJZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gaWQge3N0cmluZ30gVXNlciBJRFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2V0VXNlcklkKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gYXBwSWQge3N0cmluZ31cbiAgICogQHBhcmFtIGFwaUtleSB7c3RyaW5nfVxuICAgKiBAcGFyYW0gYXV0b0NvbmZpZ3VyZSB7Ym9vbGVhbn1cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHVwZGF0ZVVzZXJEYXRhKHVzZXJEYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19